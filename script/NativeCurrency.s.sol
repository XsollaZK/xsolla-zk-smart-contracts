// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.28;

import { console } from "forge-std/console.sol";
import { DeployStage } from "./DeployStage.s.sol";
import { WETH9 } from "../src/product/WETH9.sol";
import { Faucet } from "../src/product/Faucet.sol";

/// @title NativeCurrency Deployment Script
/// @author Generated by GitHub Copilot
/// @notice Deploys WETH9 and Faucet contracts with customizable configurations
contract NativeCurrency is DeployStage {
    
    /// @dev Configuration struct for Faucet deployment
    struct FaucetConfig {
        uint256 initialPortion;    // Amount of ETH users must send to claim
        address owner;             // Owner of the faucet contract
    }

    /// @dev Configuration struct for complete native currency ecosystem
    struct NativeCurrencyConfig {
        bool deployWETH9;          // Whether to deploy WETH9
        bool deployFaucet;         // Whether to deploy Faucet
        FaucetConfig faucetConfig; // Faucet-specific configuration
    }

    // Deployed contract addresses
    WETH9 public weth9;
    Faucet public faucet;
    
    // Configuration
    NativeCurrencyConfig public config;

    event WETH9Deployed(address indexed weth9Address);
    event FaucetDeployed(address indexed faucetAddress, uint256 portion);

    function setUp() public {}

    /// @notice Deploy with default configuration
    function run() public {
        console.log("=== Native Currency Deployment ===");
        console.log("Network: %s", block.chainid);
        console.log("Deployer: %s", msg.sender);
        console.log("Deployer balance: %s ETH", msg.sender.balance / 1e18);
        
        deployWithDefaults();
    }

    /// @notice Deploy both WETH9 and Faucet with default settings
    function deployWithDefaults() public {
        _setupDefaultConfig();
        _deploy();
        _logDeploymentSummary();
    }

    /// @notice Deploy with custom configuration
    /// @param _config Custom configuration for the deployment
    function deployWithCustomConfig(NativeCurrencyConfig memory _config) public {
        config = _config;
        _deploy();
        _logDeploymentSummary();
    }

    /// @notice Deploy only WETH9 contract
    function deployWETH9Only() public returns (WETH9) {
        console.log("--- Deploying WETH9 ---");
        
        vm.startBroadcast();
        weth9 = new WETH9();
        vm.stopBroadcast();
        
        console.log("WETH9 deployed at: %s", address(weth9));
        console.log("Name: %s", weth9.name());
        console.log("Symbol: %s", weth9.symbol());
        console.log("Decimals: %s", weth9.decimals());
        
        emit WETH9Deployed(address(weth9));
        return weth9;
    }

    /// @notice Deploy only Faucet contract with custom configuration
    /// @param _faucetConfig Configuration for the faucet
    function deployFaucetOnly(FaucetConfig memory _faucetConfig) public returns (Faucet) {
        console.log("--- Deploying Faucet ---");
        
        vm.startBroadcast();
        faucet = new Faucet();
        vm.stopBroadcast();
        
        // Configure faucet after deployment
        _configureFaucet(_faucetConfig);
        
        emit FaucetDeployed(address(faucet), _faucetConfig.initialPortion);
        return faucet;
    }

    /// @notice Setup default configuration
    function _setupDefaultConfig() internal {
        config = NativeCurrencyConfig({
            deployWETH9: true,
            deployFaucet: true,
            faucetConfig: FaucetConfig({
                initialPortion: 0.001 ether,      // 0.001 ETH per claim
                owner: msg.sender                 // Deployer as owner
            })
        });
    }

    /// @notice Internal deployment function
    function _deploy() internal {
        vm.startBroadcast();
        
        if (config.deployWETH9) {
            console.log("--- Deploying WETH9 ---");
            weth9 = new WETH9();
            console.log("WETH9 deployed at: %s", address(weth9));
            emit WETH9Deployed(address(weth9));
        }
        
        if (config.deployFaucet) {
            console.log("--- Deploying Faucet ---");
            faucet = new Faucet();
            console.log("Faucet deployed at: %s", address(faucet));
            emit FaucetDeployed(address(faucet), config.faucetConfig.initialPortion);
        }
        vm.stopBroadcast();
        
        // Post-deployment configuration
        if (config.deployFaucet) {
            _configureFaucet(config.faucetConfig);
        }
    }

    /// @notice Configure faucet after deployment
    /// @param _faucetConfig Faucet configuration
    function _configureFaucet(FaucetConfig memory _faucetConfig) internal {
        console.log("--- Configuring Faucet ---");
        
        // Set custom portion if different from default
        if (_faucetConfig.initialPortion != faucet.portion()) {
            console.log("Setting faucet portion to: %s ETH", _faucetConfig.initialPortion / 1e18);
            vm.startBroadcast();
            faucet.changePortion(_faucetConfig.initialPortion);
            vm.stopBroadcast();
        }
        
        // Transfer ownership if needed
        if (_faucetConfig.owner != msg.sender && _faucetConfig.owner != address(0)) {
            console.log("Transferring faucet ownership to: %s", _faucetConfig.owner);
            vm.startBroadcast();
            faucet.transferOwnership(_faucetConfig.owner);
            vm.stopBroadcast();
        }
    }

    /// @notice Helper function to claim from faucet (for testing)
    /// @param destination Address to receive the ETH
    function claimFromFaucet(address destination) external payable {
        require(address(faucet) != address(0), "Faucet not deployed");
        faucet.faucet{value: msg.value}(destination);
    }

    /// @notice Helper function to deposit ETH to WETH9
    /// @param amount Amount of ETH to wrap
    function wrapETH(uint256 amount) external payable {
        require(address(weth9) != address(0), "WETH9 not deployed");
        require(msg.value >= amount, "Insufficient ETH sent");
        weth9.deposit{value: amount}();
    }

    /// @notice Helper function to withdraw WETH9 back to ETH
    /// @param amount Amount of WETH to unwrap
    function unwrapETH(uint256 amount) external {
        require(address(weth9) != address(0), "WETH9 not deployed");
        weth9.withdraw(amount);
    }

    /// @notice Log comprehensive deployment summary
    function _logDeploymentSummary() internal view {
        console.log("");
        console.log("=== DEPLOYMENT SUMMARY ===");
        
        if (address(weth9) != address(0)) {
            console.log("WETH9:");
            console.log("  Address: %s", address(weth9));
            console.log("  Name: %s", weth9.name());
            console.log("  Symbol: %s", weth9.symbol());
            console.log("  Total Supply: %s ETH", weth9.totalSupply() / 1e18);
        }
        
        if (address(faucet) != address(0)) {
            console.log("Faucet:");
            console.log("  Address: %s", address(faucet));
            console.log("  Owner: %s", faucet.owner());
            console.log("  Portion: %s ETH", faucet.portion() / 1e18);
            console.log("  Balance: %s ETH", address(faucet).balance / 1e18);
            console.log("  Available to claim: %s", faucet.availableToFaucet(msg.sender).available ? "Yes" : "No");
            console.log("  NOTE: Users must send exactly %s ETH to claim", faucet.portion() / 1e18);
        }
        
        console.log("Gas used for deployment: Estimated ~500K-800K");
        console.log("Network Chain ID: %s", block.chainid);
        console.log("=== END SUMMARY ===");
        console.log("");
    }

    /// @notice Get deployment addresses for integration
    /// @return weth9Address Address of deployed WETH9 contract
    /// @return faucetAddress Address of deployed Faucet contract
    function getDeployedAddresses() external view returns (address weth9Address, address faucetAddress) {
        return (address(weth9), address(faucet));
    }

    /// @notice Check if faucet is available for claiming
    /// @param user Address to check availability for
    /// @return available Whether the user can claim from faucet
    /// @return reason Reason if not available
    function checkFaucetAvailability(address user) external view returns (bool available, string memory reason) {
        if (address(faucet) == address(0)) {
            return (false, "Faucet not deployed");
        }
        
        Faucet.FaucetAvailability memory availability = faucet.availableToFaucet(user);
        return (availability.available, availability.reason);
    }
}