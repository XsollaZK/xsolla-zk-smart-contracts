// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.28;

import { console } from "forge-std/console.sol";
import { DeployStage } from "./DeployStage.s.sol";
import { BaseFeeCollector } from "../src/product/collector/BaseFeeCollector.sol";
import { EthereumFeeCollector } from "../src/product/collector/EthereumFeeCollector.sol";

/// @title SeaportFeesCollectors Deployment Script
/// @author Generated by GitHub Copilot
/// @notice Deploys BaseFeeCollector and EthereumFeeCollector contracts with customizable configurations
contract SeaportFeesCollectors is DeployStage {
    
    /// @dev Configuration struct for fee collector deployment
    struct FeeCollectorConfig {
        address owner;              // Owner of the fee collector contract
        address operator;           // Operator address for withdrawals
        address[] withdrawalWallets; // Initial withdrawal wallet addresses
    }

    /// @dev Configuration struct for complete fee collector ecosystem
    struct FeesCollectorsConfig {
        bool deployBaseFeeCollector;      // Whether to deploy BaseFeeCollector
        bool deployEthereumFeeCollector;  // Whether to deploy EthereumFeeCollector
        FeeCollectorConfig baseFeeConfig; // Base fee collector configuration
        FeeCollectorConfig ethFeeConfig;  // Ethereum fee collector configuration
    }

    // Deployed contract addresses
    BaseFeeCollector public baseFeeCollector;
    EthereumFeeCollector public ethereumFeeCollector;
    
    // Configuration
    FeesCollectorsConfig public config;

    event BaseFeeCollectorDeployed(address indexed collectorAddress, address owner, address operator);
    event EthereumFeeCollectorDeployed(address indexed collectorAddress, address owner, address operator);
    event WithdrawalWalletAdded(address indexed collectorAddress, address withdrawalWallet);
    event OperatorAssigned(address indexed collectorAddress, address operator);

    function setUp() public {}

    /// @notice Deploy with default configuration
    function run() public {
        console.log("=== Seaport Fee Collectors Deployment ===");
        console.log("Network: %s", block.chainid);
        console.log("Deployer: %s", msg.sender);
        console.log("Deployer balance: %s ETH", msg.sender.balance / 1e18);
        
        deployWithDefaults();
    }

    /// @notice Deploy both fee collectors with default settings
    function deployWithDefaults() public {
        _setupDefaultConfig();
        _deploy();
        _logDeploymentSummary();
    }

    /// @notice Deploy with custom configuration
    /// @param _config Custom configuration for the deployment
    function deployWithCustomConfig(FeesCollectorsConfig memory _config) public {
        config = _config;
        _deploy();
        _logDeploymentSummary();
    }

    /// @notice Deploy only BaseFeeCollector contract
    /// @param _config Configuration for the fee collector
    function deployBaseFeeCollectorOnly(FeeCollectorConfig memory _config) public returns (BaseFeeCollector) {
        console.log("--- Deploying BaseFeeCollector ---");
        
        vm.startBroadcast();
        baseFeeCollector = new BaseFeeCollector();
        vm.stopBroadcast();
        
        console.log("BaseFeeCollector deployed at: %s", address(baseFeeCollector));
        
        // Configure fee collector after deployment
        _configureBaseFeeCollector(_config);
        
        emit BaseFeeCollectorDeployed(address(baseFeeCollector), _config.owner, _config.operator);
        return baseFeeCollector;
    }

    /// @notice Deploy only EthereumFeeCollector contract
    /// @param _config Configuration for the fee collector
    function deployEthereumFeeCollectorOnly(FeeCollectorConfig memory _config) public returns (EthereumFeeCollector) {
        console.log("--- Deploying EthereumFeeCollector ---");
        
        vm.startBroadcast();
        ethereumFeeCollector = new EthereumFeeCollector();
        vm.stopBroadcast();
        
        console.log("EthereumFeeCollector deployed at: %s", address(ethereumFeeCollector));
        
        // Configure fee collector after deployment
        _configureEthereumFeeCollector(_config);
        
        emit EthereumFeeCollectorDeployed(address(ethereumFeeCollector), _config.owner, _config.operator);
        return ethereumFeeCollector;
    }

    /// @notice Setup default configuration
    function _setupDefaultConfig() internal {
        address[] memory defaultWithdrawalWallets = new address[](1);
        defaultWithdrawalWallets[0] = msg.sender;
        
        config = FeesCollectorsConfig({
            deployBaseFeeCollector: true,
            deployEthereumFeeCollector: true,
            baseFeeConfig: FeeCollectorConfig({
                owner: msg.sender,
                operator: msg.sender,
                withdrawalWallets: defaultWithdrawalWallets
            }),
            ethFeeConfig: FeeCollectorConfig({
                owner: msg.sender,
                operator: msg.sender,
                withdrawalWallets: defaultWithdrawalWallets
            })
        });
    }

    /// @notice Internal deployment function
    function _deploy() internal {
        vm.startBroadcast();
        
        if (config.deployBaseFeeCollector) {
            console.log("--- Deploying BaseFeeCollector ---");
            baseFeeCollector = new BaseFeeCollector();
            console.log("BaseFeeCollector deployed at: %s", address(baseFeeCollector));
            emit BaseFeeCollectorDeployed(address(baseFeeCollector), config.baseFeeConfig.owner, config.baseFeeConfig.operator);
        }
        
        if (config.deployEthereumFeeCollector) {
            console.log("--- Deploying EthereumFeeCollector ---");
            ethereumFeeCollector = new EthereumFeeCollector();
            console.log("EthereumFeeCollector deployed at: %s", address(ethereumFeeCollector));
            emit EthereumFeeCollectorDeployed(address(ethereumFeeCollector), config.ethFeeConfig.owner, config.ethFeeConfig.operator);
        }
        
        vm.stopBroadcast();
        
        // Post-deployment configuration
        if (config.deployBaseFeeCollector) {
            _configureBaseFeeCollector(config.baseFeeConfig);
        }
        
        if (config.deployEthereumFeeCollector) {
            _configureEthereumFeeCollector(config.ethFeeConfig);
        }
    }

    /// @notice Configure BaseFeeCollector after deployment
    /// @param _config Fee collector configuration
    function _configureBaseFeeCollector(FeeCollectorConfig memory _config) internal {
        console.log("--- Configuring BaseFeeCollector ---");
        
        // Transfer ownership if needed
        if (_config.owner != msg.sender && _config.owner != address(0)) {
            console.log("Transferring ownership to: %s", _config.owner);
            vm.startBroadcast();
            baseFeeCollector.transferOwnership(_config.owner);
            vm.stopBroadcast();
        }
        
        // Assign operator if different from owner
        if (_config.operator != address(0) && _config.operator != _config.owner) {
            console.log("Assigning operator: %s", _config.operator);
            vm.startBroadcast();
            baseFeeCollector.assignOperator(_config.operator);
            vm.stopBroadcast();
            emit OperatorAssigned(address(baseFeeCollector), _config.operator);
        }
        
        // Add withdrawal wallets
        for (uint256 i = 0; i < _config.withdrawalWallets.length; i++) {
            address wallet = _config.withdrawalWallets[i];
            if (wallet != address(0)) {
                console.log("Adding withdrawal wallet: %s", wallet);
                vm.startBroadcast();
                baseFeeCollector.addWithdrawAddress(wallet);
                vm.stopBroadcast();
                emit WithdrawalWalletAdded(address(baseFeeCollector), wallet);
            }
        }
    }

    /// @notice Configure EthereumFeeCollector after deployment
    /// @param _config Fee collector configuration
    function _configureEthereumFeeCollector(FeeCollectorConfig memory _config) internal {
        console.log("--- Configuring EthereumFeeCollector ---");
        
        // Transfer ownership if needed
        if (_config.owner != msg.sender && _config.owner != address(0)) {
            console.log("Transferring ownership to: %s", _config.owner);
            vm.startBroadcast();
            ethereumFeeCollector.transferOwnership(_config.owner);
            vm.stopBroadcast();
        }
        
        // Assign operator if different from owner
        if (_config.operator != address(0) && _config.operator != _config.owner) {
            console.log("Assigning operator: %s", _config.operator);
            vm.startBroadcast();
            ethereumFeeCollector.assignOperator(_config.operator);
            vm.stopBroadcast();
            emit OperatorAssigned(address(ethereumFeeCollector), _config.operator);
        }
        
        // Add withdrawal wallets
        for (uint256 i = 0; i < _config.withdrawalWallets.length; i++) {
            address wallet = _config.withdrawalWallets[i];
            if (wallet != address(0)) {
                console.log("Adding withdrawal wallet: %s", wallet);
                vm.startBroadcast();
                ethereumFeeCollector.addWithdrawAddress(wallet);
                vm.stopBroadcast();
                emit WithdrawalWalletAdded(address(ethereumFeeCollector), wallet);
            }
        }
    }

    /// @notice Helper function to withdraw native tokens from BaseFeeCollector
    /// @param withdrawalWallet The wallet to receive the tokens
    /// @param amount Amount to withdraw
    function withdrawFromBaseFeeCollector(address withdrawalWallet, uint256 amount) external {
        require(address(baseFeeCollector) != address(0), "BaseFeeCollector not deployed");
        baseFeeCollector.withdraw(withdrawalWallet, amount);
    }

    /// @notice Helper function to withdraw ERC20 tokens from BaseFeeCollector
    /// @param withdrawalWallet The wallet to receive the tokens
    /// @param tokenContract The ERC20 token contract address
    /// @param amount Amount to withdraw
    function withdrawERC20FromBaseFeeCollector(address withdrawalWallet, address tokenContract, uint256 amount) external {
        require(address(baseFeeCollector) != address(0), "BaseFeeCollector not deployed");
        baseFeeCollector.withdrawERC20Tokens(withdrawalWallet, tokenContract, amount);
    }

    /// @notice Helper function to unwrap and withdraw WETH from EthereumFeeCollector
    /// @param withdrawalWallet The wallet to receive the ETH
    /// @param wrappedTokenContract The WETH contract address
    /// @param amount Amount to unwrap and withdraw
    function unwrapAndWithdrawFromEthereumFeeCollector(
        address withdrawalWallet, 
        address wrappedTokenContract, 
        uint256 amount
    ) external {
        require(address(ethereumFeeCollector) != address(0), "EthereumFeeCollector not deployed");
        ethereumFeeCollector.unwrapAndWithdraw(withdrawalWallet, wrappedTokenContract, amount);
    }

    /// @notice Add withdrawal wallet to fee collector
    /// @param collector The fee collector contract (0 = Base, 1 = Ethereum)
    /// @param withdrawalWallet The wallet address to add
    function addWithdrawalWallet(uint8 collector, address withdrawalWallet) external {
        if (collector == 0) {
            require(address(baseFeeCollector) != address(0), "BaseFeeCollector not deployed");
            baseFeeCollector.addWithdrawAddress(withdrawalWallet);
        } else if (collector == 1) {
            require(address(ethereumFeeCollector) != address(0), "EthereumFeeCollector not deployed");
            ethereumFeeCollector.addWithdrawAddress(withdrawalWallet);
        } else {
            revert("Invalid collector type");
        }
    }

    /// @notice Remove withdrawal wallet from fee collector
    /// @param collector The fee collector contract (0 = Base, 1 = Ethereum)
    /// @param withdrawalWallet The wallet address to remove
    function removeWithdrawalWallet(uint8 collector, address withdrawalWallet) external {
        if (collector == 0) {
            require(address(baseFeeCollector) != address(0), "BaseFeeCollector not deployed");
            baseFeeCollector.removeWithdrawAddress(withdrawalWallet);
        } else if (collector == 1) {
            require(address(ethereumFeeCollector) != address(0), "EthereumFeeCollector not deployed");
            ethereumFeeCollector.removeWithdrawAddress(withdrawalWallet);
        } else {
            revert("Invalid collector type");
        }
    }

    /// @notice Log comprehensive deployment summary
    function _logDeploymentSummary() internal view {
        console.log("");
        console.log("=== DEPLOYMENT SUMMARY ===");
        
        if (address(baseFeeCollector) != address(0)) {
            console.log("BaseFeeCollector:");
            console.log("  Address: %s", address(baseFeeCollector));
            console.log("  Owner: %s", baseFeeCollector.owner());
            console.log("  Name: %s", "base-fee-collector");
            console.log("  Balance: %s ETH", address(baseFeeCollector).balance / 1e18);
        }
        
        if (address(ethereumFeeCollector) != address(0)) {
            console.log("EthereumFeeCollector:");
            console.log("  Address: %s", address(ethereumFeeCollector));
            console.log("  Owner: %s", ethereumFeeCollector.owner());
            console.log("  Name: %s", ethereumFeeCollector.name());
            console.log("  Balance: %s ETH", address(ethereumFeeCollector).balance / 1e18);
        }
        
        console.log("Gas used for deployment: Estimated ~800K-1.2M");
        console.log("Network Chain ID: %s", block.chainid);
        console.log("=== END SUMMARY ===");
        console.log("");
    }

    /// @notice Get deployment addresses for integration
    /// @return baseFeeCollectorAddress Address of deployed BaseFeeCollector contract
    /// @return ethereumFeeCollectorAddress Address of deployed EthereumFeeCollector contract
    function getDeployedAddresses() external view returns (address baseFeeCollectorAddress, address ethereumFeeCollectorAddress) {
        return (address(baseFeeCollector), address(ethereumFeeCollector));
    }

    /// @notice Check if an address is a valid withdrawal wallet for a collector
    /// @param collector The fee collector contract (0 = Base, 1 = Ethereum)
    /// @param withdrawalWallet The wallet address to check
    /// @return isValid Whether the wallet is valid for withdrawal
    function isValidWithdrawalWallet(uint8 collector, address withdrawalWallet) external view returns (bool isValid) {
        if (collector == 0 && address(baseFeeCollector) != address(0)) {
            return baseFeeCollector.isWithdrawalWallet(withdrawalWallet);
        } else if (collector == 1 && address(ethereumFeeCollector) != address(0)) {
            return ethereumFeeCollector.isWithdrawalWallet(withdrawalWallet);
        }
        return false;
    }
}